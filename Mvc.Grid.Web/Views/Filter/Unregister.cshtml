@model IEnumerable<PersonModel>

@{
    ViewBag.Title = "Unregistering grid filter";
}

<div class="example content-block">
    <div class="widget">
        <div class="widget-header">
            <i class="fa fa-bars"></i>
            Grid
            <span class="widget-buttons">
                <i class="content-toggle"></i>
            </span>
        </div>
        <div class="widget-content">
            @(Html
                .Grid(Model)
                .Build(columns =>
                {
                    columns.Add(model => model.Name).Titled("Name");
                    columns.Add(model => model.Surname).Titled("Surname");
                    columns.Add(model => model.IsWorking).Titled("Employed");
                })
                .Filterable()
            )
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div class="example-code content-block">
            <div class="widget">
                <div class="widget-header">
                    <i class="fa fa-code"></i>
                    Global.asax
                    <span class="widget-buttons">
                        <i class="content-toggle"></i>
                    </span>
                </div>
                <div class="widget-content">
<pre>
<code>
<span class="kwd">public void</span> Application_Start()
{
    <span class="cls">MvcGrid</span>.Filters.Unregister(<span class="kwd">typeof</span>(<span class="cls">String</span>), <span class="str">"StartsWith"</span>, <span class="kwd">typeof</span>(<span class="cls">StringStartsWithFilter</span><>))
    <span class="cls">MvcGrid</span>.Filters.Unregister(<span class="kwd">typeof</span>(<span class="cls">String</span>), <span class="str">"EndsWith"</span>, <span class="kwd">typeof</span>(<span class="cls">StringEndsWithFilter</span><>))
}
</code>
</pre>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-12">
        <div class="example-code content-block">
            <div class="widget">
                <div class="widget-header">
                    <i class="fa fa-code"></i>
                    Javascript
                    <span class="widget-buttons">
                        <i class="content-toggle"></i>
                    </span>
                </div>
                <div class="widget-content">
<pre>
<code>
<span class="kwd">var</span> CustomStringFilter = (<span class="kwd">function</span> () {
    <span class="kwd">function</span> CustomStringFilter() {
    }

    CustomStringFilter.prototype = {
        render: <span class="kwd">function</span> (popup, filter) {
            <span class="kwd">var</span> lang = $.fn.mvcgrid.lang.Text;

            popup.html(
                <span class="str">'&lt;div class="popup-arrow"&gt;&lt;/div&gt;'</span> +
                <span class="str">'&lt;div class="popup-content"&gt;'</span> +
                    <span class="str">'&lt;div class="popup-group"&gt;'</span> +
                        <span class="str">'&lt;select class="form-control mvc-grid-type"&gt;'</span> +
                            <span class="str">'&lt;option value="Contains"'</span> + (filter.type == <span class="str">'Contains'</span> ? <span class="str">' selected="selected"'</span> : <span class="str">''</span>) + <span class="str">'&gt;'</span> + lang.Contains + <span class="str">'&lt;/option&gt;'</span> +
                            <span class="str">'&lt;option value="Equals"'</span> + (filter.type == <span class="str">'Equals'</span> ? <span class="str">' selected="selected"'</span> : <span class="str">''</span>) + <span class="str">'&gt;'</span> + lang.Equals + <span class="str">'&lt;/option&gt;'</span> +
                        <span class="str">'&lt;/select&gt;'</span> +
                        <span class="str">'&lt;/div&gt;'</span> +
                        <span class="str">'&lt;div class="popup-group"&gt;'</span> +
                        <span class="str">'&lt;input class="form-control mvc-grid-input" type="text" value="'</span> + filter.val + <span class="str">'"&gt;'</span> +
                        <span class="str">'&lt;/div&gt;'</span> +
                        <span class="str">'&lt;div class="popup-button-group"&gt;'</span> +
                        <span class="str">'&lt;button class="btn btn-success mvc-grid-apply" type="button"&gt;&#10004;&lt;/button&gt;'</span> +
                        <span class="str">'&lt;button class="btn btn-danger mvc-grid-cancel" type="button"&gt;&#10008;&lt;/button&gt;'</span> +
                        <span class="str">'&lt;/div&gt;'</span> +
                    <span class="str">'&lt;/div&gt;'</span>);
        },

        init: <span class="kwd">function</span> (grid, column, popup) {
            this.bindType(grid, column, popup);
            this.bindValue(grid, column, popup);
            this.bindApply(grid, column, popup);
            this.bindCancel(grid, column, popup);
        },
        bindType: <span class="kwd">function</span> (grid, column, popup) {
            <span class="kwd">var</span> type = popup.find(<span class="str">'.mvc-grid-type'</span>);
            type.bind(<span class="str">'change.mvcgrid'</span>, <span class="kwd">function</span> () {
                column.filter.type = this.value;
            });
            type.change();
        },
        bindValue: <span class="kwd">function</span> (grid, column, popup) {
            <span class="kwd">var</span> value = popup.find(<span class="str">'.mvc-grid-input'</span>);
            value.bind(<span class="str">'keyup.mvcgrid'</span>, <span class="kwd">function</span> (e) {
                column.filter.val = this.value;
                <span class="kwd">if</span> (e.keyCode == 13) {
                    popup.find(<span class="str">'.mvc-grid-apply'</span>).click();
                }
            });
        },
        bindApply: <span class="kwd">function</span> (grid, column, popup) {
            <span class="kwd">var</span> apply = popup.find(<span class="str">'.mvc-grid-apply'</span>);
            apply.bind(<span class="str">'click.mvcgrid'</span>, <span class="kwd">function</span> () {
                popup.removeClass(<span class="str">'open'</span>);
                grid.reload(grid.formFilterQuery(column));
            });
        },
        bindCancel: <span class="kwd">function</span> (grid, column, popup) {
            <span class="kwd">var</span> cancel = popup.find(<span class="str">'.mvc-grid-cancel'</span>);
            cancel.bind(<span class="str">'click.mvcgrid'</span>, <span class="kwd">function</span> () {
                popup.removeClass(<span class="str">'open'</span>);
                grid.reload(grid.formFilterQueryWithout(column));
            });
        }
    };

    <span class="kwd">return</span> CustomStringFilter;
})();


$(<span class="str">'.mvc-grid'</span>).mvcgrid({
    filters: {
        <span class="str">'Text'</span>: <span class="kwd">new</span> CustomStringFilter(),
        <span class="str">'Boolean'</span>: <span class="kwd">new</span> MvcGridBooleanFilter()
    }
});
</code>
</pre>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts {
<script>
    var CustomStringFilter = (function () {
        function CustomStringFilter() {
        }

        CustomStringFilter.prototype = {
            render: function (popup, filter) {
                var lang = $.fn.mvcgrid.lang.Text;

                popup.html(
                    '<div class="popup-arrow"></div>' +
                    '<div class="popup-content">' +
                        '<div class="popup-group">' +
                            '<select class="form-control mvc-grid-type">' +
                                '<option value="Contains"' + (filter.type == 'Contains' ? ' selected="selected"' : '') + '>' + lang.Contains + '</option>' +
                                '<option value="Equals"' + (filter.type == 'Equals' ? ' selected="selected"' : '') + '>' + lang.Equals + '</option>' +
                            '</select>' +
                         '</div>' +
                         '<div class="popup-group">' +
                            '<input class="form-control mvc-grid-input" type="text" value="' + filter.val + '">' +
                         '</div>' +
                         '<div class="popup-button-group">' +
                            '<button class="btn btn-success mvc-grid-apply" type="button">&#10004;</button>' +
                            '<button class="btn btn-danger mvc-grid-cancel" type="button">&#10008;</button>' +
                         '</div>' +
                     '</div>');
            },

            init: function (grid, column, popup) {
                this.bindType(grid, column, popup);
                this.bindValue(grid, column, popup);
                this.bindApply(grid, column, popup);
                this.bindCancel(grid, column, popup);
            },
            bindType: function (grid, column, popup) {
                var type = popup.find('.mvc-grid-type');
                type.bind('change.mvcgrid', function () {
                    column.filter.type = this.value;
                });
                type.change();
            },
            bindValue: function (grid, column, popup) {
                var value = popup.find('.mvc-grid-input');
                value.bind('keyup.mvcgrid', function (e) {
                    column.filter.val = this.value;
                    if (e.keyCode == 13) {
                        popup.find('.mvc-grid-apply').click();
                    }
                });
            },
            bindApply: function (grid, column, popup) {
                var apply = popup.find('.mvc-grid-apply');
                apply.bind('click.mvcgrid', function () {
                    popup.removeClass('open');
                    grid.reload(grid.formFilterQuery(column));
                });
            },
            bindCancel: function (grid, column, popup) {
                var cancel = popup.find('.mvc-grid-cancel');
                cancel.bind('click.mvcgrid', function () {
                    popup.removeClass('open');
                    grid.reload(grid.formFilterQueryWithout(column));
                });
            }
        };

        return CustomStringFilter;
    })();


    $('.mvc-grid').mvcgrid({
        filters: {
            'Text': new CustomStringFilter(),
            'Boolean': new MvcGridBooleanFilter()
        }
    });
</script>
}