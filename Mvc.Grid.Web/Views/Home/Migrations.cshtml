@{
    ViewBag.Title = "MVC.Grid version migrations";
}

<div class="docs content-block">
    <div class="widget">
        <div class="widget-header">
            <i class="fa fa-bars"></i>
            Migrating from v1.x to 2.x
            <span class="widget-buttons">
                <i class="content-toggle"></i>
            </span>
        </div>
        <div class="widget-content">
            <p>
                Add manual MVC.Grid instances initialization
            </p>
            <pre>$('.mvc-grid').mvcgrid();</pre>
            <p>
                Add filter operator translations in every localized mvc grid file.
            </p>
            <div class="row">
                <div class="col-md-6">
<pre>
<code>
<span class="com">// v1.x</span>
&lt;script&gt;
    $.fn.mvcgrid.lang = {
        Text: {
            Contains: <span class="str">'Contient'</span>,
            Equals: <span class="str">'Egale'</span>,
            StartsWith: <span class="str">'Commence par'</span>,
            EndsWith: <span class="str">'Fini par'</span>
        },
        Number: {
            Equals: <span class="str">'Egale'</span>,
            LessThan: <span class="str">'Inférieur à'</span>,
            GreaterThan: <span class="str">'Supérieur à'</span>,
            LessThanOrEqual: <span class="str">'Inférieur ou égale à'</span>,
            GreaterThanOrEqual: <span class="str">'Supérieur ou égale à'</span>
        },
        Date: {
            Equals: <span class="str">'Egale'</span>,
            LessThan: <span class="str">'Inférieur à'</span>,
            GreaterThan: <span class="str">'Supérieur à'</span>,
            LessThanOrEqual: <span class="str">'Inférieur ou égale à'</span>,
            GreaterThanOrEqual: <span class="str">'Supérieur ou égale à'</span>
        },
        Boolean: {
            Yes: <span class="str">'Oui'</span>,
            No: <span class="str">'Non'</span>
        }
    };
&lt;/script&gt;





</code>
</pre>
                </div>
                <div class="col-md-6">
<pre>
<code>
<span class="com">// v2.x</span>
&lt;script&gt;
    $.fn.mvcgrid.lang = {
        Text: {
            Contains: <span class="str">'Contient'</span>,
            Equals: <span class="str">'Egale'</span>,
            StartsWith: <span class="str">'Commence par'</span>,
            EndsWith: <span class="str">'Fini par'</span>
        },
        Number: {
            Equals: <span class="str">'Egale'</span>,
            LessThan: <span class="str">'Inférieur à'</span>,
            GreaterThan: <span class="str">'Supérieur à'</span>,
            LessThanOrEqual: <span class="str">'Inférieur ou égale à'</span>,
            GreaterThanOrEqual: <span class="str">'Supérieur ou égale à'</span>
        },
        Date: {
            Equals: <span class="str">'Egale'</span>,
            LessThan: <span class="str">'Inférieur à'</span>,
            GreaterThan: <span class="str">'Supérieur à'</span>,
            LessThanOrEqual: <span class="str">'Inférieur ou égale à'</span>,
            GreaterThanOrEqual: <span class="str">'Supérieur ou égale à'</span>
        },
        Boolean: {
            Yes: <span class="str">'Oui'</span>,
            No: <span class="str">'Non'</span>
        },
        Operator: {
            Select: '',
            And: <span class="str">'et'</span>,
            Or: <span class="str">'ou'</span>
        }
    };
&lt;/script&gt;
</code>
</pre>
                </div>
            </div>
            <p>
                Change any custom IGridFilter&lt;T&gt; implementations
            </p>
            <div class="row">
                <div class="col-md-7">
<pre>
<code>
<span class="com">// v1.x</span>
<span class="kwd">public class</span> <span class="cls">BooleanIsNullFilter</span>&lt;T&gt; : <span class="cls">BaseGridFilter</span>&lt;T&gt;
{
    <span class="kwd">public override</span> <span class="cls">IQueryable</span>&lt;T&gt; Process(<span class="cls">IQueryable</span>&lt;T&gt; items)
    {
        <span class="cls">Expression</span> equalsNull = <span class="cls">Expression</span>.Equal(FilteredExpression.Body, <span class="cls">Expression</span>.Constant(<span class="kwd">null</span>));

        <span class="kwd">return</span> items.Where(<span class="cls">Expression</span>.Lambda&lt;Func&lt;T, <span class="cls">Boolean</span>&gt;&gt;(equalsNull, FilteredExpression.Parameters[0]));
    }
}
</code>
</pre>
                </div>
                <div class="col-md-5">
<pre>
<code>
<span class="com">// v2.x</span>
<span class="kwd">public class</span> <span class="cls">BooleanIsNullFilter</span> : <span class="cls">BaseGridFilter</span>
{
    <span class="kwd">public override</span> <span class="cls">Expression</span> Apply(<span class="cls">Expression</span> expression)
    {
        <span class="kwd">return</span> <span class="cls">Expression</span>.Equal(expression, <span class="cls">Expression</span>.Constant(<span class="kwd">null</span>));
    }
}


</code>
</pre>
                </div>
            </div>
            <p>Change any custom client side filters implementation</p>
            <div class="row">
                <div class="col-md-6">
<pre>
<code>
<span class="com">// v1.x</span>
<span class="kwd">var</span> CustomTextFilter = (<span class="kwd">function</span> () {
    <span class="kwd">function</span> CustomTextFilter() {
    }

    CustomTextFilter.prototype = {
        render: <span class="kwd">function</span> (popup, filter) {
            popup.html(
                <span class="str">'&lt;div class="popup-arrow"&gt;&lt;/div&gt;'</span> +
                <span class="str">'&lt;div class="popup-content"&gt;'</span> +
                    <span class="str">'&lt;div class="popup-group"&gt;'</span> +
                    <span class="str">'&lt;input class="form-control mvc-grid-input" placeholder="Contains" type="text" value="'</span> + filter.val + <span class="str">'"&gt;'</span> +
                    <span class="str">'&lt;/div&gt;'</span> +
                    <span class="str">'&lt;div class="popup-group"&gt;'</span> +
                    <span class="str">'&lt;div class="mvc-grid-apply col-sm-6"&gt;'</span> +
                        <span class="str">'&lt;button class="btn btn-success mvc-grid-apply" type="button"&gt;&#10004;&lt;/button&gt;'</span> +
                    <span class="str">'&lt;/div&gt;'</span> +
                    <span class="str">'&lt;div class="mvc-grid-cancel col-sm-6"&gt;'</span> +
                        <span class="str">'&lt;button class="btn btn-danger mvc-grid-cancel" type="button"&gt;&#10008;&lt;/button&gt;'</span> +
                    <span class="str">'&lt;/div&gt;'</span> +
                    <span class="str">'&lt;/div&gt;'</span> +
                <span class="str">'&lt;/div&gt;'</span>);
        },
        init: <span class="kwd">function</span> (grid, column, popup) {
            <span class="kwd">this</span>.bindType(grid, column, popup);
            <span class="kwd">this</span>.bindValue(grid, column, popup);
            <span class="kwd">this</span>.bindApply(grid, column, popup);
            <span class="kwd">this</span>.bindCancel(grid, column, popup);
        },
        bindType: <span class="kwd">function</span> (grid, column, popup) {
            column.filter.type = "Contains";
        },
        bindValue: <span class="kwd">function</span> (grid, column, popup) {
            <span class="kwd">var</span> value = popup.find(<span class="str">'.mvc-grid-input'</span>);
            value.bind(<span class="str">'keyup.mvcgrid'</span>, <span class="kwd">function</span> (e) {
                column.filter.val = <span class="kwd">this</span>.value;
                <span class="kwd">if</span> (e.keyCode == 13) {
                    popup.find(<span class="str">'.mvc-grid-apply'</span>).click();
                }
            });
        },
        bindApply: <span class="kwd">function</span> (grid, column, popup) {
            <span class="kwd">var</span> apply = popup.find(<span class="str">'.mvc-grid-apply'</span>);
            apply.bind(<span class="str">'click.mvcgrid'</span>, <span class="kwd">function</span> () {
                popup.removeClass(<span class="str">'open'</span>);
                grid.reload(grid.formFilterQuery(column));
            });
        },
        bindCancel: <span class="kwd">function</span> (grid, column, popup) {
            <span class="kwd">var</span> cancel = popup.find(<span class="str">'.mvc-grid-cancel'</span>);
            cancel.bind(<span class="str">'click.mvcgrid'</span>, <span class="kwd">function</span> () {
                popup.removeClass(<span class="str">'open'</span>);
                grid.reload(grid.formFilterQueryWithout(column));
            });
        }
    };
    <span class="kwd">return</span> CustomTextFilter;
})();

$(<span class="str">'.mvc-grid'</span>).mvcgrid({
    filters: {
        <span class="str">'Contains'</span>: <span class="kwd">new</span> CustomTextFilter()
    }
});






























</code>
</pre>
                </div>
                <div class="col-md-6">
<pre>
<code>
<span class="com">// v2.x</span>
<span class="kwd">var</span> CustomTextFilter = (<span class="kwd">function</span> () {
    <span class="kwd">function</span> CustomTextFilter() {
    }

    CustomTextFilter.prototype = {
        render: <span class="kwd">function</span> (popup, filter) {
            popup.html(
                <span class="str">'&lt;div class="popup-arrow"&gt;&lt;/div&gt;'</span> +
                <span class="str">'&lt;div class="popup-content"&gt;'</span> +
                    <span class="str">'&lt;div class="first-filter popup-group"&gt;'</span> +
                        <span class="str">'&lt;input class="mvc-grid-input" placeholder="Contains" type="text" value="'</span> + filter.first.val + <span class="str">'"&gt;'</span> +
                    <span class="str">'&lt;/div&gt;'</span> +
                    (filter.isMulti ?
                    <span class="str">'&lt;div class="popup-group popup-group-operator"&gt;'</span> +
                        <span class="str">'&lt;select class="mvc-grid-operator"&gt;'</span> +
                            <span class="str">'&lt;option value=""&gt;&lt;/option&gt;'</span> +
                            <span class="str">'&lt;option value="And"'</span> + (filter.operator == <span class="str">'And'</span> ? <span class="str">' selected="selected"'</span> : <span class="str">''</span>) + <span class="str">'&gt;And&lt;/option&gt;'</span> +
                            <span class="str">'&lt;option value="Or"'</span> + (filter.operator == <span class="str">'Or'</span> ? <span class="str">' selected="selected"'</span> : <span class="str">''</span>) + <span class="str">'&gt;Or&lt;/option&gt;'</span> +
                        <span class="str">'&lt;/select&gt;'</span> +
                    <span class="str">'&lt;/div&gt;'</span> +
                    <span class="str">'&lt;div class="second-filter popup-group"&gt;'</span> +
                        <span class="str">'&lt;input class="mvc-grid-input" placeholder="Contains" type="text" value="'</span> + filter.second.val + <span class="str">'"&gt;'</span> +
                    <span class="str">'&lt;/div&gt;'</span> :
                    '') +
                    <span class="str">'&lt;div class="popup-button-group"&gt;'</span> +
                        <span class="str">'&lt;button class="btn btn-success mvc-grid-apply" type="button"&gt;&#10004;&lt;/button&gt;'</span> +
                        <span class="str">'&lt;button class="btn btn-danger mvc-grid-cancel" type="button"&gt;&#10008;&lt;/button&gt;'</span> +
                    <span class="str">'&lt;/div&gt;'</span> +
                <span class="str">'&lt;/div&gt;'</span>);
        },

        init: <span class="kwd">function</span> (grid, column, popup) {
            <span class="kwd">this</span>.bindType(grid, column, popup);
            <span class="kwd">this</span>.bindValue(grid, column, popup);
            <span class="kwd">this</span>.bindApply(grid, column, popup);
            <span class="kwd">this</span>.bindCancel(grid, column, popup);
            <span class="kwd">this</span>.bindOperator(grid, column, popup);
        },
        bindType: <span class="kwd">function</span> (grid, column, popup) {
            column.filter.first.type = <span class="str">"Contains"</span>;
            column.filter.second.type = <span class="str">"Contains"</span>;
        },
        bindValue: <span class="kwd">function</span> (grid, column, popup) {
            <span class="kwd">var</span> firstValue = popup.find(<span class="str">'.first-filter .mvc-grid-input'</span>);
            firstValue.bind(<span class="str">'keyup.mvcgrid'</span>, <span class="kwd">function</span> (e) {
                column.filter.first.val = <span class="kwd">this</span>.value;
                <span class="kwd">if</span> (e.keyCode == 13) {
                    popup.find(<span class="str">'.mvc-grid-apply'</span>).click();
                }
            });

            <span class="kwd">var</span> secondValue = popup.find(<span class="str">'.second-filter .mvc-grid-input'</span>);
            secondValue.bind(<span class="str">'keyup.mvcgrid'</span>, <span class="kwd">function</span> (e) {
                column.filter.second.val = <span class="kwd">this</span>.value;
                <span class="kwd">if</span> (e.keyCode == 13) {
                    popup.find(<span class="str">'.mvc-grid-apply'</span>).click();
                }
            });
        },
        bindApply: <span class="kwd">function</span> (grid, column, popup) {
            <span class="kwd">var</span> apply = popup.find(<span class="str">'.mvc-grid-apply'</span>);
            apply.bind(<span class="str">'click.mvcgrid'</span>, <span class="kwd">function</span> () {
                popup.removeClass(<span class="str">'open'</span>);
                grid.reload(grid.formFilterQuery(column));
            });
        },
        bindCancel: <span class="kwd">function</span> (grid, column, popup) {
            <span class="kwd">var</span> cancel = popup.find(<span class="str">'.mvc-grid-cancel'</span>);
            cancel.bind(<span class="str">'click.mvcgrid'</span>, <span class="kwd">function</span> () {
                popup.removeClass(<span class="str">'open'</span>);
                grid.reload(grid.formFilterQueryWithout(column));
            });
        },
        bindOperator: <span class="kwd">function</span> (grid, column, popup) {
            <span class="kwd">var</span> operator = popup.find(<span class="str">'.mvc-grid-operator'</span>);
            operator.bind(<span class="str">'change.mvcgrid'</span>, <span class="kwd">function</span> () {
                column.filter.operator = <span class="kwd">this</span>.value;
            });
            operator.change();
        }
    };

    <span class="kwd">return</span> CustomTextFilter;
})();

$(<span class="str">'.mvc-grid'</span>).mvcgrid({
    filters: {
        <span class="str">'Custom'</span>: <span class="kwd">new</span> CustomTextFilter()
    }
});
</code>
</pre>
                </div>
            </div>
            <p>Change any affected grid.columns.filter usages</p>
            <div class="row">
                <div class="col-md-6">
<pre>
<code>
<span class="com">// v1.x</span>
$(<span class="str">'.mvc-grid'</span>).mvcgrid({
    rowClicked: <span class="kwd">function</span> (grid, row, data) {
        console.log(grid.columns[0].filter.type);
        console.log(grid.columns[0].filter.val);
    }
})






</code>
</pre>
                </div>
                <div class="col-md-6">
<pre>
<code>
<span class="com">// v2.x</span>
$(<span class="str">'.mvc-grid'</span>).mvcgrid({
    rowClicked: <span class="kwd">function</span> (grid, row, data) {
        console.log(grid.columns[0].filter.first.type);
        console.log(grid.columns[0].filter.first.val);

        console.log(grid.columns[0].filter.isMulti);
        console.log(grid.columns[0].filter.operator);

        console.log(grid.columns[0].filter.second.type);
        console.log(grid.columns[0].filter.second.val);
    }
})
</code>
</pre>
                </div>
            </div>
        </div>
    </div>
</div>
